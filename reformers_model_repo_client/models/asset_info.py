# coding: utf-8

"""
    REFORMERS Digital Twin: Model Repository API

    This API provides access to the REFORMERS Digital Twin Model Repository.  _Funding acknowledgement_: The [REFORMERS project](https://reformers-energyvalleys.eu) has received funding from the European Unionâ€™s research and innovation programme Horizon Europe under the [Grant Agreement No.101136211](https://cordis.europa.eu/project/id/101136211) 

    The version of the OpenAPI document: v0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AssetInfo(BaseModel):
    """
    AssetInfo
    """ # noqa: E501
    download_url: Optional[StrictStr] = Field(default=None, alias="downloadUrl")
    path: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    repository: Optional[StrictStr] = None
    format: Optional[StrictStr] = None
    checksum: Optional[Dict[str, Any]] = None
    content_type: Optional[StrictStr] = Field(default=None, alias="contentType")
    last_modified: Optional[StrictStr] = Field(default=None, alias="lastModified")
    last_downloaded: Optional[StrictStr] = Field(default=None, alias="lastDownloaded")
    uploader: Optional[StrictStr] = None
    uploader_ip: Optional[StrictStr] = Field(default=None, alias="uploaderIp")
    file_size: Optional[StrictInt] = Field(default=None, alias="fileSize")
    blob_created: Optional[StrictStr] = Field(default=None, alias="blobCreated")
    __properties: ClassVar[List[str]] = ["downloadUrl", "path", "id", "repository", "format", "checksum", "contentType", "lastModified", "lastDownloaded", "uploader", "uploaderIp", "fileSize", "blobCreated"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "downloadUrl": obj.get("downloadUrl"),
            "path": obj.get("path"),
            "id": obj.get("id"),
            "repository": obj.get("repository"),
            "format": obj.get("format"),
            "checksum": obj.get("checksum"),
            "contentType": obj.get("contentType"),
            "lastModified": obj.get("lastModified"),
            "lastDownloaded": obj.get("lastDownloaded"),
            "uploader": obj.get("uploader"),
            "uploaderIp": obj.get("uploaderIp"),
            "fileSize": obj.get("fileSize"),
            "blobCreated": obj.get("blobCreated")
        })
        return _obj


